#!/usr/bin/env ruby

$LOAD_PATH.unshift(File.expand_path('../../lib', __FILE__))
require 'research_assistant'
require 'securerandom'

def main
  topic = ARGV[0] || "sky"
  research_id = SecureRandom.uuid

  article = ''

  # Initialize components
  api_client = ResearchAssistant::OllamaInterface::ApiClient.new
  json_api_client = ResearchAssistant::OllamaInterface::JsonApiClient.new
  writer_api_client = ResearchAssistant::OllamaInterface::WriterApiClient.new
  file_manager = ResearchAssistant::KnowledgeBase::FileManager.new(research_id)
  concept_extractor = ResearchAssistant::CoreEngine::ConceptExtractor.new(api_client, json_api_client)
  relations_finder = ResearchAssistant::CoreEngine::RelationsFinder.new(api_client, json_api_client)
  user_intent_extractor = ResearchAssistant::CoreEngine::UserIntentExtractor.new(json_api_client)
  response_analyzer = ResearchAssistant::CoreEngine::InsightsExtractor.new(api_client, json_api_client)
  concept_updater = ResearchAssistant::CoreEngine::ConceptUpdater.new(concept_extractor)
  gap_detector = ResearchAssistant::CoreEngine::GapDetector.new(api_client, json_api_client)
  output_generator = ResearchAssistant::Output::OutputGenerator.new(writer_api_client)
  question_engine = ResearchAssistant::CoreEngine::QuestionEngine.new(api_client, json_api_client)
  knowledge_integrator = ResearchAssistant::CoreEngine::KnowledgeIntegrator.new(
    insights_extractor: response_analyzer,
    concept_extractor: concept_extractor,
    gap_detector: gap_detector,
    questions_engine: question_engine,
    relations_finder: relations_finder,
  )

  iteration_manager = ResearchAssistant::CoreEngine::IterationManager.new(
    api_client,
    json_api_client,
    writer_api_client
  )

  pp "Run research on topic: #{topic}"

  prompt = user_intent_extractor.create_prompt(topic)
  pp prompt

  # questions = question_engine.extract(prompt)
  # pp questions

  # # Run research
  # concepts = concept_extractor.extract(topic, article)
  #
  # # pp "Concepts :" + analysis.inspect
  #
  # insights = response_analyzer.analyze(topic, article)

  # insights = response_analyzer.analyze(topic, analysis)

  # file_manager.save_analysis(analysis)

  # iteration_manager.run(analysis)

  # pp analysis.inspect

  # gaps = gap_detector.detect(topic, article)

  # pp gaps.inspect

  # relations = relations_finder.find_relations(topic, article, insights)

  # pp relations.inspect

  # analysis = []
  # knowledge = knowledge_integrator.integrate(analysis, topic, article, prompt)
  #
  # article = output_generator.generate_article(knowledge, article)
  #
  # pp article

   knowledge = ResearchAssistant::KnowledgeBase::Knowledge.new
    knowledge.iteration = 1
    knowledge.topic = topic
    knowledge.user_intent = prompt
  round_knowledge = iteration_manager.run(knowledge)

  pp "article : #{round_knowledge.article}"
end

main if __FILE__ == $0